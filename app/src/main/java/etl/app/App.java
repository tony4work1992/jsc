/*
 * This source file was generated by the Gradle 'init' task
 */
package etl.app;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import etl.app.transform.ba_factory.ExecutorFactory;
import etl.app.transform.ba_nodes.Executable;
import etl.app.transform.contants.EExecutor;

public class App {

    public static void main(String[] args) {
        // Hardcode data set
        String dataset = "[{\"Ten\": \"TuNVA1\", \"Tuoi\": 25},{\"Ten\": \"TuNVA2\", \"Tuoi\": 26},{\"Ten\": \"TuNVA3\", \"Tuoi\": 27}]";
        // Hardcode params (add columns)
        String addColumns = "[{\"column\": \"email\"},{\"column\": \"gender\", \"value\": \"Male\"}]";

        // Hardcode params (rename columns)
        String renameColumns = "[{\"oldColumn\": \"Ten\", \"newColumn\": \"name\"},{\"oldColumn\": \"Tuoi\", \"newColumn\": \"age\"}]";

        // Hardcode params (remove columns)
        String removeColumns = "[{\"column\": \"email\"},{\"column\": \"gender\"}]";

        // Hardcode params (concat columns)
        String concatColumns = "[{\"newColumn\": \"Name-Age\", \"concatColumns\": [\"name\", \"age\"]}]";
        // Hardcode params (filter)
        String filter = "[{\"filterColumn\": \"age\", \"operator\": \"=\", \"filterValue\": 25}]";
        ObjectMapper mapper = new ObjectMapper();
        try {
            JsonNode jsonDataset = mapper.readTree(dataset);
            String originalJson = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonDataset);

            System.out.println("======Original data set======\n" + originalJson);
            // Add columns
            Executable addColumnsExecuter = ExecutorFactory.createExecutor(EExecutor.ADD_COLUMNS);
            JsonNode returnData1 = addColumnsExecuter.execute(addColumns, jsonDataset);
            String updatedJson1 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnData1);
            System.out.println("======After add column======\n" + updatedJson1);

            // Rename columns
            Executable renameColumnsExecutor = ExecutorFactory.createExecutor(EExecutor.RENAME_COLUMNS);
            JsonNode returnData2 = renameColumnsExecutor.execute(renameColumns, returnData1);
            String updatedJson2 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnData2);
            System.out.println("======After rename columns======\n" + updatedJson2);

            // Remove columns
            Executable removeColumnsExecutor = ExecutorFactory.createExecutor(EExecutor.REMOVE_COLUMNS);
            JsonNode returnData3 = removeColumnsExecutor.execute(removeColumns, returnData2);
            String updatedJson3 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnData3);
            System.out.println("======After remove columns======\n" + updatedJson3);

            // Concat 
            Executable concatExecutor = ExecutorFactory.createExecutor(EExecutor.CONCAT);
            JsonNode returnData4 = concatExecutor.execute(concatColumns, returnData3);
            String updatedJson4 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnData4);
            System.out.println("======After concat columns======\n" + updatedJson4);

            // Filter
            Executable filterExecutor = ExecutorFactory.createExecutor(EExecutor.FILTER);
            JsonNode returnData5 = filterExecutor.execute(filter, returnData4);
            String updatedJson5 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnData5);
            System.out.println("======After filter======\n" + updatedJson5);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
