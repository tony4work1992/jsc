/*
 * This source file was generated by the Gradle 'init' task
 */
package smartosc.jsc.applications.etl;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;

import smartosc.jsc.applications.etl.ba_nodes.Executable;
import smartosc.jsc.applications.etl.constants.FilePathConstants;
import smartosc.jsc.applications.etl.mo_factory.EtlFactory;

public class App {

    public static void main(String[] args) {

        ObjectMapper mapper = new ObjectMapper();

        try {
            JsonNode config = mapper.readTree(new File(FilePathConstants.CONFIG_FILE_PATH));
            Map<Integer, JsonNode> returnResult = new HashMap();

            JsonNode nodes = config.get("nodes");
            JsonNode parentData = mapper.createObjectNode();
            EtlFactory etlFactory = new EtlFactory();

            for (JsonNode node : nodes) {
                Integer id = node.get("id").asInt();
                String name = node.get("name").asText();
                String params = node.get("config").asText();
                if (!node.get("parent").isEmpty()) {
                    ArrayNode parentNodeIds = (ArrayNode) node.get("parent");
                    Integer parentNodeId = parentNodeIds.get(0).asInt();
                    parentData = returnResult.get(parentNodeId);
                }
                Executable executer = etlFactory.getExecuter(name, returnResult);
                JsonNode result = executer.execute(params, parentData);
                returnResult.put(id, result);
            }
            String unionString = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnResult.get(8));
            System.out.println("-----------Result--------------");
            System.out.println(unionString);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}