/*
 * This source file was generated by the Gradle 'init' task
 */
package smartosc.jsc.applications;

import java.util.Iterator;
import java.util.Map;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

import smartosc.jsc.applications.etl.ba_factory.ExecuterFactory;
import smartosc.jsc.applications.etl.ba_nodes.Executable;
import smartosc.jsc.applications.etl.config.AppConfig;
import smartosc.jsc.applications.etl.constants.AppConstants;

public class App {

    @SuppressWarnings("deprecation")
    public static void main(String[] args) {
        try {
            ExecuterFactory executerFactory = new ExecuterFactory();
            ObjectMapper mapper = new ObjectMapper();

            ObjectNode objectNodeValue = mapper.createObjectNode();

            // load data
            Executable loadDataExecuter = executerFactory.getExecuter(AppConstants.LOAD_DATA_EXECUTER);
            JsonNode configNodes = loadDataExecuter.execute(AppConfig.CONFIG_NODES, null);

            for (JsonNode item : configNodes) {
                if (!item.isObject()) {
                    throw new RuntimeException("Data item is not an object");
                }
                String nodeId = item.get("id").asText();
                String nodeName = item.get("name").asText();
                String nodeConfig = item.get("config").toString();
                JsonNode nodeParentIds = item.get("parent");
                JsonNode data;
                Executable executer = executerFactory.getExecuter(nodeName);
                if (!nodeName.equals(AppConstants.UNION_EXECUTER)) {
                    JsonNode jsonDataset = null;
                    for (JsonNode parentId : nodeParentIds) {
                        jsonDataset = objectNodeValue.get(parentId.asText());
                    }
                    data = executer.execute(nodeConfig, jsonDataset);
                } else {
                    data = executer.execute(nodeParentIds.toString(), objectNodeValue);
                }

                objectNodeValue.put(nodeId, data);
            }

            Iterator<Map.Entry<String, JsonNode>> fields = objectNodeValue.fields();
            JsonNode lastNode = null;
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> entry = fields.next();
                lastNode = entry.getValue();
            }

            String lastNodeData = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(lastNode);
            System.out.println(lastNodeData);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
