/*
 * This source file was generated by the Gradle 'init' task
 */
package smartosc.jsc.applications;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.databind.node.ObjectNode;
import smartosc.jsc.applications.etl.ba_base.ExecuterFactory;
import smartosc.jsc.applications.etl.ba_nodes.Executable;

import java.io.File;
import java.util.Iterator;
import java.util.Objects;

public class App {

    public static void main(String[] args) {
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode nodeResults = mapper.createObjectNode();
        try {
            JsonNode config = mapper.readTree(new File("app/src/main/java/smartosc/jsc/applications/input/config.json"));
            JsonNode nodes = config.get("nodes");
            for (JsonNode node : nodes) {
                int id = node.path("id").asInt();
                String name = node.path("name").asText();
                String params = node.path("config").asText();
                Executable module = ExecuterFactory.getExecuter(name);
                JsonNode parentIds = node.get("parent");
                JsonNode result;
                if (node.has("parent") && !node.get("parent").isNull()) {
                    if (parentIds.size() == 1) {
                        result = module.execute(params, nodeResults.get(String.valueOf(parentIds.get(0))));
                    } else {
                        ObjectNode parentData = mapper.createObjectNode();
                        for (JsonNode parentId : parentIds) {
                            parentData.set(parentId.asText(), nodeResults.get(parentId.asText()));
                        }
                        result = module.execute(params, parentData);
                    }
                } else {
                    result = module.execute(params, null);
                }
                nodeResults.set(String.valueOf(id), result);
            }
            System.out.println("---------Final Result---------");
            printJsonAsTable(nodeResults.get("8"));
            System.out.println("------------------------");

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void printJsonAsTable(JsonNode nodes) {
        if (nodes.isArray()) {
            JsonNode firstNode = nodes.get(0);
            if (firstNode != null) {
                StringBuilder header = new StringBuilder();
                Iterator<String> fields = firstNode.fieldNames();
                while (fields.hasNext()) {
                    String key = fields.next();
                    if(Objects.equals(key, "sku_country")){
                        continue;
                    }
                    header.append(String.format("%-25s", key));
                }
                System.out.println(header.toString());

                // Print rows
                for (JsonNode node : nodes) {
                    StringBuilder row = new StringBuilder();
                    Iterator<String> fieldsRow = node.fieldNames();
                    while (fieldsRow.hasNext()) {
                        String key = fieldsRow.next();
                        if(Objects.equals(key, "sku_country")){
                            continue;
                        }
                        row.append(String.format("%-25s", node.get(key).asText()));
                    }
                    System.out.println(row.toString());
                }
            }
        }
    }
}
