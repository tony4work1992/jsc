/*
 * This source file was generated by the Gradle 'init' task
 */
package smartosc.jsc.applications;

import java.util.Arrays;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import smartosc.jsc.applications.etl.mo_add_columns.AddColumnsExecuter;
import smartosc.jsc.applications.etl.mo_concat_columns.ConcatColumnsExecuter;
import smartosc.jsc.applications.etl.mo_filter_columns.FilterColumnsExcuter;
import smartosc.jsc.applications.etl.mo_remove_columns.RemoveColumnsExecuter;
import smartosc.jsc.applications.etl.mo_rename_columns.RenameColumnsExcuter;

public class App {

    public static void main(String[] args) {
        String dataset = "[{\"name\": \"BinhCT\", \"gender\": \"Female\", \"address\": \"Ha Noi\", \"date_of_birth\": \"20-10\"}]";
        // @TODO The params should be extracted from the request
        String addColumns1 = "[{\"column\": \"email\", \"value\": \"binhct@smartosc.com\"}]";
        String addColumns2 = "[{\"column\": \"age\", \"value\": \"27\"}]";
        String removeColumns1 = "[{\"column\": \"address\"}]";
        String removeColumns2 = "[{\"column\": \"date_of_birth\"}]";
        String renameColumns1 = "[{\"column\": \"name\", \"value\": \"Cao Thi Binh\"}]";
        String renameColumns2 = "[{\"column\": \"email\", \"value\": \"binhcaothi@smartosc.com\"}]";
        String concatColumns1 = "[{\"newColumnName\": \"description\", \"sourceColumns\": [\"name\", \"age\", \"email\"]}]";
        String filterOperator = "[{\"column\": \"email\", \"operator\": \"contains\", \"value\": \"binhcaothi@smartosc.com\"}]";

        ObjectMapper mapper = new ObjectMapper();
        try {
            JsonNode jsonDataset = mapper.readTree(dataset);

            AddColumnsExecuter addColumnsExecuter = new AddColumnsExecuter();
            // @TODO Factory pattern will be used to create the executer
            JsonNode returnData1 = addColumnsExecuter.execute(addColumns1, jsonDataset);
            JsonNode returnData2 = addColumnsExecuter.execute(addColumns2, returnData1);
            String updatedJson = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnData2);
            System.out.println("Data after adding columns: " + updatedJson);

            // Remove columns executer
            RemoveColumnsExecuter removeColumnsExecuter = new RemoveColumnsExecuter();
            JsonNode returnDataArterRemove1 = removeColumnsExecuter.execute(removeColumns1, returnData2);
            JsonNode returnDataArterRemove2 = removeColumnsExecuter.execute(removeColumns2, returnDataArterRemove1);
            String updatedJsonAfterRemove = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnDataArterRemove2);
            System.out.println("Data after removing columns: " + updatedJsonAfterRemove);

            // Concat columns executer
            ConcatColumnsExecuter concatColumnsExecuter = new ConcatColumnsExecuter();
            JsonNode returnDataArterConcat = concatColumnsExecuter.execute(concatColumns1, returnDataArterRemove2);
            String updatedJsonAfterConcat = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnDataArterConcat);
            System.out.println("Data after concat columns: " + updatedJsonAfterConcat);

            // Rename columns executer
            RenameColumnsExcuter renameColumnsExcuter = new RenameColumnsExcuter();
            JsonNode returnDataArterRename1 = renameColumnsExcuter.execute(renameColumns1, returnDataArterRemove2);
            JsonNode returnDataArterRename2 = renameColumnsExcuter.execute(renameColumns2, returnDataArterRename1);
            String updatedJsonAfterRename = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnDataArterRename2);
            System.out.println("Data after renaming columns: " + updatedJsonAfterRename);
            
            // Filter columns executer
            FilterColumnsExcuter filterColumnsExcuter = new FilterColumnsExcuter();
            JsonNode returnDataArterFilter = filterColumnsExcuter.execute(filterOperator, returnDataArterRename2);
            String updatedJsonAfterFilter = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnDataArterFilter);
            System.out.println("Data after filtering columns: " + updatedJsonAfterFilter);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
