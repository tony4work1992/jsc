/*
 * This source file was generated by the Gradle 'init' task
 */
package smartosc.jsc.applications;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import smartosc.jsc.applications.etl.Exercise2;
import smartosc.jsc.applications.etl.mo_add_columns.AddColumnsExecute;
import smartosc.jsc.applications.etl.mo_filter_columns.FilterColumnsExecute;
import smartosc.jsc.applications.etl.mo_remove_columns.RemoveColumnsExecute;
import smartosc.jsc.applications.etl.mo_rename_columns.RenameColumnsExecute;
import smartosc.jsc.applications.etl.mo_concat_columns.ConcatColumnsExecute;
import smartosc.jsc.applications.etl.ba_nodes.Constants;

import java.util.Map;

public class App {

    public static void main(String[] args) {
        /**
         System.out.println("==================== START HOMEWORK 1 ====================");

         String dataset = "[{\"name\": \"TrungNd2\", \"gender\": \"Male\"}]";
         // @TODO The params should be extracted from the request
         // Add Columns
         String addColumns1 = "[{\"column\": \"email\", \"value\": \"trungnd2@smartosc.com\"}]";
         String addColumns2 = "[{\"column\": \"age\", \"value\": \"27\"}]";
         String addColumns3 = "[{\"column\": \"phoneNumber\", \"value\": \"0348598316\"},{\"column\": \"birthday\", \"value\": \"01-10-1998\"}]";

         // Filter Columns
         String filterColumns1 = "[{\"column\":\"name\",\"operator\":\"=\",\"value\":\"TrungNd2\"}]";
         String filterColumns2 = "[{\"column\":\"age\",\"operator\":\">\",\"value\":28}]";
         String filterColumns3 = "[{\"column\":\"email\",\"operator\":\"like\",\"value\":\"trungnd\"}]";
         String filterColumns4 = "[{\"column\":\"email\",\"operator\":\"like\",\"value\":\"trung5\"}]";
         String filterColumns5 = "[{\"column\":\"name\",\"operator\":\"=\",\"value\":\"TrungNd2\"},{\"column\":\"age\",\"operator\":\"=\",\"value\":27}]";

         // Rename Columns
         String renamedColumns1 = "[{\"column\":\"name\",\"newColumn\":\"firstname\"}]";

         // remove Columns
         String removeColumns1 = "[{\"column\":\"age\"},{\"column\":\"gender\"}]";

         // concat Columns
         String concatColumns1 = "[{\"column\":\"name_gender\",\"listColumn\":\"name,gender\"}]";

         ObjectMapper mapper = new ObjectMapper();
         try {
         JsonNode jsonDataset = mapper.readTree(dataset);

         AddColumnsExecute addColumnsExecute = new AddColumnsExecute();
         FilterColumnsExecute filterExecute = new FilterColumnsExecute();
         RenameColumnsExecute renameExecute = new RenameColumnsExecute();
         RemoveColumnsExecute removeExecute = new RemoveColumnsExecute();
         ConcatColumnsExecute concatExecute = new ConcatColumnsExecute();

         System.out.println("\ndataSet ban dau");
         String updatedJson = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonDataset);
         System.out.println(updatedJson);

         // @TODO Factory pattern will be used to create the executer
         // ================= Start AddColumns =================
         JsonNode returnData1 = addColumnsExecute.execute(addColumns1, jsonDataset);
         JsonNode returnData2 = addColumnsExecute.execute(addColumns2, returnData1);
         JsonNode returnData3 = addColumnsExecute.execute(addColumns3, returnData2);
         // returnData3 se duoc su dung de thuc hien cac module sau

         System.out.println("\ndataSet sau khi add columns (data nay se duoc su dung de run cac module sau)");
         String updatedJsonAdd = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnData3);
         System.out.println(updatedJsonAdd);
         // ================= End AddColumns =================

         // ================= Start FilterColumns =================
         JsonNode returnDataFilter1 = filterExecute.execute(filterColumns1, returnData3);    // filter column name = TrungNd2
         JsonNode returnDataFilter2 = filterExecute.execute(filterColumns2, returnData3);    // filter column age > 28
         JsonNode returnDataFilter3 = filterExecute.execute(filterColumns3, returnData3);    // filter column email like trungnd
         JsonNode returnDataFilter4 = filterExecute.execute(filterColumns4, returnData3);    // filter column email like trung5
         JsonNode returnDataFilter5 = filterExecute.execute(filterColumns5, returnData3);    // filter column phoneNumber = empty

         System.out.println("\ndataSet sau khi filter column name = TrungNd2");
         String updatedJsonFilter1 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnDataFilter1);
         System.out.println(updatedJsonFilter1);

         System.out.println("\ndataSet sau khi filter column age > 28");
         String updatedJsonFilter2 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnDataFilter2);
         System.out.println(updatedJsonFilter2);

         System.out.println("\ndataSet sau khi filter column email like trungnd");
         String updatedJsonFilter3 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnDataFilter3);
         System.out.println(updatedJsonFilter3);

         System.out.println("\ndataSet sau khi filter column email like trung5");
         String updatedJsonFilter4 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnDataFilter4);
         System.out.println(updatedJsonFilter4);

         System.out.println("\ndataSet sau khi filter column name = TrungNd2 and age = 27");
         String updatedJsonFilter5 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnDataFilter5);
         System.out.println(updatedJsonFilter5);
         // ================= End FilterColumns =================

         // ================= Start RenameColumns =================
         JsonNode returnDataRename1 = renameExecute.execute(renamedColumns1, returnData3);    // rename column name thanh firstname

         System.out.println("\ndataSet sau khi rename column name thanh firstname");
         String updatedJsonRename1 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnDataRename1);
         System.out.println(updatedJsonRename1);
         // ================= End RenameColumns =================

         // ================= Start RemoveColumns =================
         JsonNode returnDataRemove1 = removeExecute.execute(removeColumns1, returnData3);    // rename column name thanh firstname

         System.out.println("\ndataSet sau khi remove column age and gender");
         String updatedJsonRemove1 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnDataRemove1);
         System.out.println(updatedJsonRemove1);
         // ================= End RemoveColumns =================

         // ================= Start ConcatColumns =================
         JsonNode returnDataConcat1 = concatExecute.execute(concatColumns1, returnData3);    // rename column name thanh firstname

         System.out.println("\ndataSet sau khi concat column name,gender thanh name_gender");
         String updatedJsonConcat1 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnDataConcat1);
         System.out.println(updatedJsonConcat1);
         // ================= End RemoveColumns =================
         System.out.println("==================== END HOMEWORK 1 ====================");
         } catch (Exception e) {
         e.printStackTrace();
         }
         */


        try {
            System.out.println("\n\n==================== START HOMEWORK 2 ====================");
            ObjectMapper mapper2 = new ObjectMapper();
            String dataset2 = Constants.DATASET2;
            String jsonData = Constants.NODES;

            Exercise2 exercise2 = new Exercise2();
            Map<Integer, JsonNode> resultExercise2 = exercise2.execute(dataset2, jsonData);

            String updatedJson2 = mapper2.writerWithDefaultPrettyPrinter().writeValueAsString(resultExercise2.get(7));
//            System.out.println(updatedJson2);
            System.out.println("\n\n==================== END HOMEWORK 2 ====================");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}