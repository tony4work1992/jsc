/*
 * This source file was generated by the Gradle 'init' task
 */
package smartosc.jsc.applications;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import smartosc.jsc.applications.etl.mo_add_columns.AddColumnsExecutor;
import smartosc.jsc.applications.etl.mo_concat.ConcatExecutor;
import smartosc.jsc.applications.etl.mo_filter.FilterExecutor;
import smartosc.jsc.applications.etl.mo_remove_columns.RemoveColumnsExecutor;
import smartosc.jsc.applications.etl.mo_rename_columns.RenameColumnsExecutor;
import smartosc.jsc.applications.etl.mo_union.LoadDataExecutor;
import smartosc.jsc.applications.etl.mo_union.UnionConcatExecutor;
import smartosc.jsc.applications.etl.mo_union.UnionNodeOrder;
import smartosc.jsc.applications.etl.mo_union.UnionRemoveExecutor;
import smartosc.jsc.applications.etl.mo_union.UnionRenameColumnsExecutor;
// import smartosc.jsc.applications.etl.mo_union.UnionExecutor;

public class App {

    public static void main(String[] args) {
        // Hardcode data set
        String dataset = "["
            + "{\"sku\": \"EXAM.SKU.01\", \"title\": \"Smart Tivi 4K\", \"width\": 120, \"height\": 40, \"category\": \"TIVI\", \"image\": \"https://lg.com/sku/%26D118\", \"country\": \"VN\"},"
            + "{\"sku\": \"EXAM.SKU.02\", \"title\": \"Smart Tivi 4K Untra Width\", \"width\": 120, \"height\": 40, \"category\": \"TIVI\", \"image\": \"https://lg.com/sku/%26D119\", \"country\": \"VN\"},"
            + "{\"sku\": \"EXAM.SKU.03\", \"title\": \"Smart Tivi 2K\", \"width\": 120, \"height\": 40, \"category\": \"TIVI\", \"image\": \"https://lg.com/sku/%26D120\", \"country\": \"VN\"},"
            + "{\"sku\": \"EXAM.SKU.13\", \"title\": \"Soundbar Bluetooth A\", \"width\": 140, \"height\": 15, \"category\": \"Soundbar\", \"image\": \"https://lg.com/sku/13\", \"country\": \"UK\"},"
            + "{\"sku\": \"EXAM.SKU.14\", \"title\": \"Soundbar Bluetooth A\", \"width\": 140, \"height\": 15, \"category\": \"Soundbar\", \"image\": \"https://lg.com/sku/14\", \"country\": \"UK\"}"
        + "]";

        String jsonConfigData = """
        {
            "nodes": {
                "0": {
                    "id": 0,
                    "name": "LoadData",
                    "config": {},
                    "children": [1],
                    "parent": null
                },
                "1": {
                    "id": 1,
                    "name": "RenameColumns",
                    "config": {},
                    "children": [2],
                    "parent": null
                },
                "2": {
                    "id": 2,
                    "name": "Concat",
                    "config": {},
                    "children": [3],
                    "parent": [1]
                },
                "3": {
                    "id": 3,
                    "name": "Remove",
                    "config": {},
                    "children": [4, 5],
                    "parent": [2]
                },
                "4": {
                    "id": 4,
                    "name": "Filter",
                    "config": {},
                    "children": [],
                    "parent": [3]
                },
                "5": {
                    "id": 5,
                    "name": "Filter",
                    "config": {},
                    "children": [],
                    "parent": [3]
                },
                "6": {
                    "id": 6,
                    "name": "AddColumns",
                    "config": {},
                    "children": [8],
                    "parent": [4]
                },
                "7": {
                    "id": 7,
                    "name": "AddColumns",
                    "config": {},
                    "children": [8],
                    "parent": [5]
                },
                "8": {
                    "id": 8,
                    "name": "Union",
                    "config": {},
                    "children": [],
                    "parent": [6, 7]
                }
            }
        }
        """;

        // Hardcode params (add columns)
        String addColumns = "[{\"column\": \"name_country\"},{\"column\": \"salable\"}]";

        // Hardcode params (rename columns)
        String renameColumns = "[{\"oldColumn\": \"title\", \"newColumn\": \"name\"}]";

        // Hardcode params (remove columns)
        String removeColumns = "[{\"column\": \"sku\"},{\"column\": \"title\"}]";

        // Hardcode params (concat columns)
        String concatColumns = "[{\"newColumn\": \"name-width\", \"concatColumns\": [\"title\", \"width\"]}]";
        // Hardcode params (filter)
        String filter = "[{\"filterColumn\": \"sku\", \"operator\": \"=\", \"filterValue\": \"EXAM.SKU.01\"}]";
        // Convert data config input -> object 
        
        ObjectMapper mapper = new ObjectMapper();

        try {
            JsonNode jsonDataset = mapper.readTree(dataset);
            String originalJson = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonDataset);
            // System.out.println("======Original data set======\n" + originalJson);
            
            //Add column
            AddColumnsExecutor addColumnsExecuter = new AddColumnsExecutor();
            JsonNode returnData1 = addColumnsExecuter.execute(addColumns, jsonDataset);
            String updatedJson1 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnData1);
            // System.out.println("======After add column======\n" + updatedJson1);

            //Rename column
            RenameColumnsExecutor renameColumnsExecutor = new RenameColumnsExecutor();
            JsonNode returnData2 = renameColumnsExecutor.execute(renameColumns, jsonDataset);
            String updatedJson2 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnData2);
            // System.out.println("======After rename column======\n" + updatedJson2);

            //Remove column
            RemoveColumnsExecutor removeColumnsExecutor = new RemoveColumnsExecutor();
            JsonNode returnData3 = removeColumnsExecutor.execute(removeColumns, jsonDataset);
            String updatedJson3 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnData3);
            // System.out.println("======After remove column======\n" + updatedJson3);

            //Concat
            ConcatExecutor concatExecutor = new ConcatExecutor();
            JsonNode returnData4 = concatExecutor.execute(concatColumns, jsonDataset);
            String updatedJson4 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnData4);
            // System.out.println("======After concat column======\n" + updatedJson4);

            //Filter
            FilterExecutor filterExecutor = new FilterExecutor();
            JsonNode returnData5 = filterExecutor.execute(filter, jsonDataset);
            String updatedJson5 = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(returnData5);
            // System.out.println("======After filter column======\n" + updatedJson5);

            //Union
            String inputNodeIds = "0,1,2,3";
            // Get order node
            UnionNodeOrder unionNodeOrder = new UnionNodeOrder();
            List<String> actions = unionNodeOrder.orderNode(inputNodeIds, jsonConfigData);

            ObjectMapper objectMapper = new ObjectMapper();
            List<Map<String, Object>> data = objectMapper.readValue(dataset, new TypeReference<>() {});
            //Rename
            Map<String, String> renameMapping = new HashMap<>();
            renameMapping.put("title", "name");
            List<String> columnsToConcat = List.of("name", "country");
            String columnToDelete = "image";
            for (String action : actions) {
            switch (action) {
                case "LoadData":
                    data = new LoadDataExecutor().execute(data);
                    break;
                case "RenameColumns":
                    data = new UnionRenameColumnsExecutor().execute(data, renameMapping);
                    break;
                case "Concat":
                    data = new UnionConcatExecutor().execute(data, columnsToConcat);
                    break;
                case "Remove":
                    UnionRemoveExecutor removeExecutor = new UnionRemoveExecutor();
                    removeExecutor.execute(data, "image");
                    break;
                default:
                    throw new IllegalArgumentException("Unknown action: " + action);
            }
            System.out.println("After action: " + action);
            System.out.println(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(data));
        }

        //Add salable with value = Y
        data.forEach(record -> record.put("salable", "Y"));
        //Filter with country = VN
        List<Map<String, Object>> filteredCountry = data.stream()
                .filter(record -> "VN".equals(record.get("country")))
                .collect(Collectors.toList());
        System.out.println("Filtered data (country = VN):");
        System.out.println(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(filteredCountry));

        //Filter with category = soundbar
        List<Map<String, Object>> filteredCategory = data.stream()
                .filter(record -> "VN".equals(record.get("category")))
                .collect(Collectors.toList());
        System.out.println("Filtered data (country = soundbar):");
        System.out.println(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(filteredCategory));

        //Change salable = N
        data.forEach(record -> record.put("salable", "N"));
        System.out.println("After updating salable column to 'N':");
        System.out.println(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(data));
            
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
