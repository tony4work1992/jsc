/*
 * This source file was generated by the Gradle 'init' task
 */
package smartosc.jsc.applications;

import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;

import smartosc.jsc.applications.etl.ba_nodes.Executable;
import smartosc.jsc.applications.etl.ba_nodes.ExecutorFactory;
import smartosc.jsc.applications.etl.constants.AppConstants;
import smartosc.jsc.applications.etl.mo_add_columns.AddColumnsExecuter;
import smartosc.jsc.applications.etl.mo_concat_values.ConcatValuesExecuter;
import smartosc.jsc.applications.etl.mo_filter_values.FilterValuesExecuter;
import smartosc.jsc.applications.etl.mo_filter_values.constants.FilterValueConstants;
import smartosc.jsc.applications.etl.mo_remove_columns.RemoveColumnsExecuter;
import smartosc.jsc.applications.etl.mo_rename_columns.RenameColumnsExecuter;
import smartosc.jsc.applications.etl.mo_rename_columns.constants.RenameColumnsConstants;
import smartosc.jsc.applications.etl.mo_load_data.LoadDataExecuter;
import smartosc.jsc.applications.etl.mo_union.UnionExecuter;

public class App {

    public static void main(String[] args) {
        ObjectMapper mapper = new ObjectMapper();

        try {
            JsonNode jsonNode = null;
            Map<Integer, JsonNode> returnResult = new HashMap();
            JsonNode inputConfigs = mapper.readTree(new File("src/main/java/smartosc/jsc/applications/config.json"));

            for (JsonNode inputConfig : inputConfigs.get("nodes")) {
                if (!inputConfig.isObject()) {
                    throw new RuntimeException("Data item is not an object");
                }
                JsonNode parentData = null;
                Integer id = inputConfig.get("id").asInt();
                String name = inputConfig.get("name").asText();
                String params = inputConfig.get("config").asText();

                if (!inputConfig.get("parent").isEmpty()) {
                    ArrayNode parentNodeIds = (ArrayNode) inputConfig.get("parent");
                    Integer parentNodeId = parentNodeIds.get(0).asInt();
                    parentData = returnResult.get(parentNodeId);
                }

                Executable executor = ExecutorFactory.getExecutor(name, returnResult);
                JsonNode result = executor.execute(params, parentData);
                returnResult.put(id, result);
                printJson(returnResult.get(id), mapper, name);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void printJson(JsonNode jsonNode, ObjectMapper mapper, String nameType) throws Exception {
        System.out.println("===============" + nameType + "======================");
        String prettyJson = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonNode);
        System.out.println(prettyJson);
    }
}
