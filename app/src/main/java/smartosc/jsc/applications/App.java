/*
 * This source file was generated by the Gradle 'init' task
 */
package smartosc.jsc.applications;

import java.util.LinkedHashMap;
import java.util.Map;


import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import smartosc.jsc.applications.etl.module.ba_nodes.Executable;
import smartosc.jsc.applications.etl.module.core_nodes.CommandQueueExecutor;
import smartosc.jsc.applications.etl.module.core_nodes.NodeExecute;

public class App {

    public static void main(String[] args) {
        App app = new App();
        app.run();
    }

    private void run() {
        try {
            //command queue creator
            Map<Executable, String> nodeExecute = new NodeExecute().executeNode();
            
            //push to queue
            CommandQueueExecutor commandQueueExecutor = new CommandQueueExecutor();
            for (Map.Entry<Executable, String> nodeExecuteEntry : nodeExecute.entrySet()) {
                commandQueueExecutor.pushToCommandQueueExecutor(nodeExecuteEntry.getKey(), nodeExecuteEntry.getValue());
            }

            // //queue execute
            Map<Integer, JsonNode> listDataSet = new LinkedHashMap<>();
            for (Map.Entry<Executable, String> commandQueueExecutorEntry : commandQueueExecutor.getCommandQueueExecutor().entrySet()) {
                listDataSet = commandQueueExecutorEntry.getKey().execute(commandQueueExecutorEntry.getValue(), listDataSet);
            }

            //print result
            printJsonData(listDataSet);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void printJsonData(Map<Integer, JsonNode> dataset) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            for (Map.Entry<Integer, JsonNode> entry : dataset.entrySet()) {
                String formattedJson = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(entry.getValue());
                System.out.println(formattedJson);
            }
        } catch (com.fasterxml.jackson.core.JsonProcessingException e) {
            System.err.println("Error printing JSON data: " + e.getMessage());
        }
    }
}
