/*
 * This source file was generated by the Gradle 'init' task
 */
package smartosc.jsc.applications;

import java.util.List;
import java.io.IOException;

import smartosc.jsc.applications.cart.Cart;
import smartosc.jsc.applications.cart.action.CartRepository;
import smartosc.jsc.applications.product.Product;
import smartosc.jsc.applications.product.action.ProductRepository;
import smartosc.jsc.applications.promotion.Promotion;
import smartosc.jsc.applications.promotion.action.PromotionRepository;
import smartosc.jsc.applications.promotion.action.ValidatePromotion;
import smartosc.jsc.applications.order.Order;
import smartosc.jsc.applications.order.action.OrderRepository;

public class App {
    public static void main(String[] args) throws Exception {
        ProductRepository productRepository = new ProductRepository();
        String productJsonString = "[{\"id\": 1, \"name\": \"Product1\", \"price\": 100.0, \"quantity\": 10, \"description\": \"This is product 1\"}," +
                             "{\"id\": 2, \"name\": \"Product2\", \"price\": 200.0, \"quantity\": 20, \"description\": \"This is product 2\"}]" +
                             "{\"id\": 3, \"name\": \"Product3\", \"price\": 300.0, \"quantity\": 30, \"description\": \"This is product 3\"}]";
        
        // Add list product
        productRepository.addProduct(productJsonString);

        // Update product
        productRepository.updateProduct(1, "UpdatedProduct1", 150.0, 15, "Updated description for product 1");

        // Delete product
        productRepository.deleteProduct(3);

        // Get list product
        List<Integer> ids = List.of(1,2);
        List<Product> filteredProducts = productRepository.getListProducts(ids);
        System.out.println("Filtered Products:");
        for (Product product : filteredProducts) {
            System.out.println("ID: " + product.id + ", Name: " + product.name + ", Price: " + product.price + ", Quantity: " + product.quantity + ", Description: " + product.description);
        }

        // Filter product by name
        List<Product> productsByName = productRepository.filterProductByName("UpdatedProduct1");
        System.out.println("Products filtered by name:");
        for (Product product : productsByName) {
            System.out.println("ID: " + product.id + ", Name: " + product.name + ", Price: " + product.price + ", Quantity: " + product.quantity + ", Description: " + product.description);
        }

        // Add promotion to csv file
        String promotionJsonString = "[{\"id\":1, \"name\":\"Holiday Sale\", \"type\":\"flat\", \"discount\":20.5, \"condition\":{\"minPurchase\":\"100\"}, \"description\":\"Big discount on all items\", \"code\":\"HOLIDAY20\"}, {\"id\":2, \"name\":\"Black Friday\", \"type\":\"percent\", \"discount\":10, \"condition\":{\"minPurchase\":\"200\"}, \"description\":\"Huge discounts on electronics\", \"code\":\"BLACKFRIDAY\"}]";
        PromotionRepository promotionRepository = new PromotionRepository();
        promotionRepository.addPromotion(promotionJsonString);

        // Get promotion info
        String code = "HOLIDAY20";
        Promotion promotion = PromotionRepository.getPromotionByCode(code);

        // Add product to cart
        CartRepository cartRepository = new CartRepository();
        cartRepository.addProductToCart("1", 2, 100.0);
        cartRepository.addProductToCart("2", 1, 150.0);

        // Get cart information
        Cart cart = cartRepository.getCartById(1);
        // cart.displayCartInfo();

        // Apply promotion to cart
        double purchase = cart.getGrandTotal();
        ValidatePromotion validate = new ValidatePromotion();
        boolean validatePromotion = validate.validatePromotion(code, purchase);
        if(validatePromotion) {
            Promotion applyPromotion = PromotionRepository.getPromotionByCode(code);
            double grandTotalAfterDiscount = cart.calculateTotalAfterDiscount(cart.getGrandTotal(), applyPromotion.getDiscount(), applyPromotion.getType());
            cart.setGrandTotal(grandTotalAfterDiscount);
        }
        // Place order - write cart information to order
        OrderRepository orderRepository = new OrderRepository();

        // Save Order to CSV file
        String filePath = "order.csv";
        try {
            orderRepository.saveOrder(cart, filePath);
            System.out.println("Cart has been saved to " + filePath);
        } catch (IOException e) {
            System.err.println("Failed to save cart: " + e.getMessage());
        }
    }

}
