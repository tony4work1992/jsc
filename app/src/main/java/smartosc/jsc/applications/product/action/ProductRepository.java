/*
 * This source file was generated by the Gradle 'init' task
 */
package smartosc.jsc.applications.product.action;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

import org.json.JSONArray;
import org.json.JSONObject;

import smartosc.jsc.applications.product.Product;
import smartosc.jsc.applications.product.productinterface.ProductRepositoryInterface;

public class ProductRepository implements ProductRepositoryInterface {
    public static final String FILE_NAME = "product.csv";

    @Override
    public void addProduct(String jsonString) {
        JSONArray jsonArray = new JSONArray(jsonString);
        List<Product> products = new ArrayList<>();
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject jsonObject = jsonArray.getJSONObject(i);
            int id = jsonObject.getInt("id");
            String name = jsonObject.getString("name");
            double price = jsonObject.getDouble("price");
            int quantity = jsonObject.getInt("quantity");
            String description = jsonObject.getString("description");
            products.add(new Product(id, name, price, quantity, description));
        }
        Product.writeToCSV(products, FILE_NAME);
        System.out.println("Products added successfully.");
    }

    @Override
    public void updateProduct(int id, String name, double price, int quantity, String description) {
        List<Product> products = getAllProducts();
        boolean updated = false;

        for (Product product : products) {
            if (product.id == id) {
                product.name = name;
                product.price = price;
                product.quantity = quantity;
                product.description = description;
                updated = true;
                break;
            }
        }

        if (updated) {
            Product.writeToCSV(products, FILE_NAME);
            System.out.println("Product updated successfully.");
        } else {
            System.out.println("Product with ID " + id + " not found.");
        }
    }

    @Override
    public void deleteProduct(int id) {
        List<Product> products = getAllProducts();
        boolean deleted = false;

        Iterator<Product> iterator = products.iterator();
        while (iterator.hasNext()) {
            Product product = iterator.next();
            if (product.id == id) {
                iterator.remove();
                deleted = true;
                break;
            }
        }

        if (deleted) {
            Product.writeToCSV(products, FILE_NAME);
            System.out.println("Product deleted successfully.");
        } else {
            System.out.println("Product with ID " + id + " not found.");
        }
    }

    @Override
    public List<Product> getAllProducts() {
        List<Product> products = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            reader.readLine();
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                int id = Integer.parseInt(data[0]);
                String name = data[1];
                double price = Double.parseDouble(data[2]);
                int quantity = Integer.parseInt(data[3]);
                String description = data[4];
                products.add(new Product(id, name, price, quantity, description));
            }
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
        }
        return products;
    }

    @Override
    public List<Product> getListProducts(List<Integer> ids) {
        List<Product> products = getAllProducts();
        List<Product> filteredProducts = new ArrayList<>();

        for (Product product : products) {
            if (ids.contains(product.id)) {
                filteredProducts.add(product);
            }
        }

        return filteredProducts;
    }

    @Override
    public List<Product> filterProductByName(String name) {
        List<Product> products = getAllProducts();
        return products.stream()
                .filter(product -> product.name.equalsIgnoreCase(name))
                .collect(Collectors.toList());
    }
}